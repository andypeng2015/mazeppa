main(x, s) :=
    let v0 := u8(x);
    let v1 := u16(x);
    let v2 := u32(x);
    let v3 := u64(x);
    let v4 := u128(x);
    let v5 := i8(x);
    let v6 := i16(x);
    let v7 := i32(x);
    let v8 := i64(x);
    let v9 := i128(x);
    let v10 := #(x);
    let v11 := string(x);
    let v12 := ~(x);
    let v13 := +(x, 7u8);
    let v14 := -(x, 7u8);
    let v15 := *(x, 7u8);
    let v16 := /(7u8, x);
    let v17 := %(7u8, x);
    let v18 := |(x, 7u8);
    let v19 := &(x, 7u8);
    let v20 := ^(x, 7u8);
    let v21 := <<(x, 7u8);
    let v22 := >>(x, 7u8);
    let v23 := length(s);
    let v24 := ++(s, "abc");
    let v25 := get(s, 7u64);
    Combine(CastOps(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11), ArithOps(
    v12, v13, v14, v15, v16, v17), BitOps(v18, v19, v20, v21, v22), StringOps(
    v23, v24, v25), CmpOps(=(x, 7u8), !=(x, 7u8), >(x, 7u8), >=(x, 7u8), <(x,
    7u8), <=(x, 7u8)));
